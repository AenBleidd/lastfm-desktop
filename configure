#!/bin/bash

source common/bash/utils.sh.inc
source common/bash/generate_ide_projects.sh.inc

while [ $# -gt 0 ]
do
    case "$1" in
        --debug)
            echo "The default is --debug, but let's pretend you made a difference anyway.";;
        --release)
            echo 'Will optimise and strip binaries.'
            RELEASE=1;;
        --help | -h | --usage)
            echo "There is one option, it is: --release"
            exit;;
    esac
    
    shift
done


header "Configuring Last.fm"
middle "Checking for qmake..."

qmake-qt4 -v &> /dev/null
if [[ $? == 127 ]]
then
    qmake -v &> /dev/null
    if [[ $? == 0 ]]
    then
        QMAKE=qmake
    fi
else
    QMAKE=qmake-qt4
fi

if [[ $? == 127 ]]
then
          ##########################################################################80-->
	echo "Sorry, qmake was not found, is Qt4 installed?"
	exit
fi

middle "Checking the installed version of Qt is correct..."

# valid qmake output
# QMake version 2.01a
# Using Qt version 4.2.2 in /opt/qt/4.2.2/lib

min=4
$QMAKE -v 2> /dev/null | grep -q "^Using Qt version 4.[$min-9]"

if [[ $? > 0 ]]
then
	      ##########################################################################80-->
	echo "Your version of Qt seems to be too old, we require Qt 4.$min or above."
	echo
	echo "It is possible you have Qt3 and Qt4 both installed. Locate your Qt4 installation"
	echo "and ensure it is placed first in the path, eg:"
	echo
	echo "	PATH=/opt/qt4/bin:\$PATH ./configure"
	echo
	echo "However this configure script is very basic, perhaps we got it wrong.."
	echo "Try typing the following, perhaps it will build for you :)"
	echo
	echo "	qmake -config release && make"
	exit
fi


header 'Generating Build System'

if [ $RELEASE ]
then
    qmake -config release
    which nmake &> /dev/null && BUILD_CMD='nmake' || BUILD_CMD='make'

    case `uname` in
        Darwin)
			middle='all\n\tcd app/client && make -f Makefile.appclient'
            perl -e "print \"dmg: $middle dmg\n\"" >> Makefile
            perl -e "print \"bundle: $middle bundle\n\"" >> Makefile
	esac
else
    case `uname` in
        Darwin) 
            gen_xcodeproj || die "Configure failed."
            BUILD_CMD='open Last.fm.xcodeproj';;
        Linux)
            qmake -config debug || die "Configure failed."
            BUILD_CMD='make'
            middle "Configured to produce a debug build.";;
        *)      
            gen_vs_sln || die "Configure failed."
            BUILD_CMD='cygstart Last.sln';;
    esac
fi

echo
echo 'Good, your configure is finished!'
echo "Now type '$BUILD_CMD' to complete the awesome cycle."

rmdir _build build &> /dev/null
rmdir _bin &> /dev/null
