#!/usr/bin/ruby
# tool to look through a qmake pro file and find what headers are to be 
# installed it then figures out the classes in each of those files
# and then creates the directory _include and creates files named after the 
# class names in there which #include the file that contains the class

cwd = File.dirname( __FILE__ )
require 'find'
require 'ftools'
require "#{cwd}/platform.rb"

exit if ARGV[0].nil?
exit if !File.file?( ARGV[0] )

def mkdir( path )
  Dir.mkdir( path )
rescue SystemCallError
  # braindead for this to throw an exception on failure
  # as an additional rant, the Ruby File/Dir classes are rubbishly designed
end

mkdir( '_include' )
mkdir( '_include/lastfm' )


def step3( path, classname )
  if ARGV[1] == '--cp'
    File.copy( path, '_include/lastfm/' + classname )
  else
    f = File.open( "_include/lastfm/#{classname}", "w" )
    f.write( "// this file was generated by penis\n" )
    f.write( "#include \"../../#{path}\"\n" )
    f.close()
  end
end

def step2( path )
  b = nil
  File.open( path ).each_line do |line|
    matches = /(class|struct)\s*LASTFM_[A-Z]+_DLLEXPORT\s*([a-zA-Z0-9]+)/.match( line )
    if !matches.nil?
      b = true
      step3( path, matches[2] )
    end
  end
  # if no matches, then assume one thing and just copy it, this makes it work
  # for namespaces etc.
  step3( path, File.basename( path, '.h' ) ) if b.nil?
end

File.open( ARGV[0] ).each_line do |line|
  matches = /^\s*headers.files\s+=\s+(.*)$/.match( line )
  matches[1].split( ' ' ).each { |file| step2( File.dirname( ARGV[0] ) + '/' + file ) } if !matches.nil?
end
